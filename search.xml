<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基本概况</title>
      <link href="/2020/03/21/ji-ben-gai-kuang/"/>
      <url>/2020/03/21/ji-ben-gai-kuang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该Android学习系列主要是参考郭神的第一行代码（第二版）来学习的，目的是在学习的过程中记录下一些重要的知识点，不喜勿喷，谢谢。</p></blockquote><p>##一、Android系统架构<br>###1.架构图</p><p><img src="https://upload-images.jianshu.io/upload_images/15623160-c65ff49e2723c513.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1024" alt="架构图"></p><p>###2.层级说明</p><p>####（1）Linux内核层</p><p> Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供了底层的驱动，如显示驱动，音频驱动等。</p><p>####（2）系统运行库层</p><p> 这一层通过一些C/C++库来为Android系统提供了主要的特性支持。如OpenGL|ES库提供了3D绘图的支持。同时，这一层还有Android运行时库，它主要提供了一些核心库，能够允许开发者使用Java来编写Android应用。另外，它还包含了Dalvik虚拟机，能够使得每一个Android应用都能运行在独立的进程当中，并且拥有一个自己的Dalvik虚拟机实例。相比于Java虚拟机，它是专门为移动设备定制的，针对手机内存，CPU性能有限等情况做了优化处理。</p><p>####（3）应用框架层</p><p>这一层主要提供了构建应用程序时可能用到的各种API。</p><p>####（4）应用层</p><p>所有安装在手机上的应用程序都属于这一层。</p><blockquote><p>现在好像多了一层，硬件抽象层。是由于制作手机的工厂不愿意分享源码导致！如下图所示：</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/15623160-19cfb4490aaa25d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="新版架构图"><br>新版架构图<br>###3.Android应用开发特色</p><p>（1）四大组件</p><p>Activity（活动）：是所有Android应用程序的门面，凡是在应用中看到的东西都是放在activity中的。</p><p>Service（服务）：前台看不到，是在后台默默运行的，即使退出应用service仍然可以继续运行。</p><p>Broadcast Receiver（广播接收器）：它允许你的应用接收或者发出广播消息。</p><p>Content Provider（内容提供器）：它为应用程序之间共享数据提供了可能。</p><p>（2）丰富的系统控件</p><p>（3）SQLite数据库</p><p>（4）强大的多媒体</p><p>（5）地理位置定位</p><p>###4.程序的项目结构（项目结构模式为project）</p><p>（1）总览图</p><p><img src="https://upload-images.jianshu.io/upload_images/15623160-d8debbceffdb8ae9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/284" alt=""></p><p>（2）.gradle和.idea</p><p>这两个目录下放置的是Android Studio（以下简称为AS）自动生成的一些文件。</p><p>（3）app</p><p>项目中的代码、资源等内容几乎都是放置在该目录下。</p><p>（4）build</p><p>它主要包含了一些在编译时自动生成的文件。</p><p>（5）gradle</p><p>这个目录下包含了gradle wrapper的配置文件，使用gradle wrapper的方式不需要提前将gradle下载好，而是会自动根据本地的缓存情况决定是否需要联网下载gradle。AS默认没有开启。</p><p>（6）.gitignore</p><p>该文件是用来将指定的目录或文件排除在版本控制之外。</p><p>（7）build.gradle</p><p>这是项目全局的gradle构建脚本。</p><p>（8）gradle.properties</p><p>该文件是全局的gradle配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。</p><p>（9）gradlew和gradlew.bat</p><p>这两个文件是用来在命令行中执行gradle命令的，前者是在Linux或Mac系统中使用，后者是在Windows系统中使用。</p><p>（10）local.properties</p><p>该文件用来指定本电脑中Android SDK的路径。</p><p>（11）MyCat.iml</p><p>iml文件是所有IntelliJ IDEA项目都会自动生成的一个文件（AS也是其旗下的一款软件），用来标识这是一个IntelliJ IDEA项目。</p><p>（12）settings.gradle</p><p>该文件用于指定该项目中引入的模块。 </p><p><img src="https://upload-images.jianshu.io/upload_images/15623160-52cda7657c9d2ff3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/259" alt=""></p><p>###5.app目录下的主要内容具体分析</p><p>（1）总览图</p><p><img src="https://upload-images.jianshu.io/upload_images/15623160-18057b1da29b2590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/307" alt=""></p><p>（2）libs</p><p>该目录主要放置一些第三方的jar包。</p><p>（3）androidTest</p><p>此处是用来编写Android Test测试用例的，可以对项目进行一些自动化测试。</p><p>（4）java</p><p>该目录是放置所有Java代码的地方。</p><p>（5）res</p><p>该目录主要放置项目中用到的所有图片、布局、字符串等资源。其中，drawable目录放置图片，layout目录放置布局，values目录放置字符串。</p><p>（6）AndroidManifest.xml</p><p>它是整个Android项目的配置文件。</p><p>（7）build.gradle</p><p>这是app模块的gradle构建脚本。</p><p>###6.全局build.gradle文件讲解</p><p>（1）文件内容</p><p><img src="https://upload-images.jianshu.io/upload_images/15623160-4a966e62ead385e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/923" alt=""></p><p>（2）jcenter</p><p>其实它是一个代码托管仓库，很多Android开源项目都会选择将代码托管到 jecnter 中，声明了这行配置之后，我们就可以在项目中引用任何jcenter上的开源项目了。</p><p>（3）classpath</p><p>dependency闭包中使用了classpath声明了一个Gradle插件。因为它不是专门为构建Android项目开发的，Java、C++等都可以使用Gradle来构建，所以我们要想使用它来构建Android项目就需要声明这个插件。<br>###7.app目录下build.gradle文件讲解</p><p><img src="https://upload-images.jianshu.io/upload_images/15623160-7a1ff4ab69999023.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1161" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/15623160-dc1e607513bdadcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Android入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/20/hello-world/"/>
      <url>/2020/03/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
